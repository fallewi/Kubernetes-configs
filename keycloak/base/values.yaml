#
#  Author: Fall Lewis YOMBA
#  Date: 2022-03-09 18:45:33 +0000 (Wed, 09 Mar 2022)
#
#  vim:ts=2:sts=2:sw=2:et
#  lint: k8s
#  kics-scan ignore
#
#  https://github.com/fallewi/Kubernetes-configs
#
#  License: see accompanying Fall Lewis YOMBA LICENSE file
#
#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback to help steer this or other code I publish
#
#  https://www.linkedin.com/in/fall-lewis-yomba-034589123
#

# ============================================================================ #
#                                  Chart Values
# ============================================================================ #

# https://artifacthub.io/packages/helm/bitnami/keycloak

# https://github.com/bitnami/bitnami-docker-keycloak

# helm repo add bitnami https://charts.bitnami.com/bitnami
#
# helm show values bitnami/keycloak >> keycloak-values.yaml

---
# XXX: needed to get past Mixed Content browser security error caused by http://<fqdn>/keycloak.js link in source html
proxyAddressForwarding: true

## Keycloak authentication parameters
## ref: https://github.com/bitnami/bitnami-docker-keycloak#admin-credentials
##
auth:
  createAdminUser: true
  adminUser: admin # default: user
  adminPassword: admin # default: "" results in pw "bitnami"
  ## @param auth.managementUser Wildfly management user
  managementUser: manager
  managementPassword: manager # default: "" results in pw "bitnami1"
  ## @param auth.existingSecret An already existing secret containing auth info
  ## e.g:
  ## existingSecret:
  ##   name: mySecret
  ##   keyMapping:
  ##     admin-password: myPasswordKey
  ##     management-password: myManagementPasswordKey
  ##     tls-keystore-password: myTlsKeystorePasswordKey
  ##     tls-truestore-password: myTlsTruestorePasswordKey
  ##
  existingSecret: ""
  ## @param auth.existingSecretPerPassword Override `existingSecret` and other secret values
  ## e.g:
  ## existingSecretPerPassword:
  ##   keyMapping:
  ##     adminPassword: KEYCLOAK_ADMIN_PASSWORD
  ##     managementPassword: KEYCLOAK_MANAGEMENT_PASSWORD
  ##     databasePassword: password
  ##     tlsKeystorePassword: JKS_KEYSTORE_TRUSTSTORE_PASSWORD
  ##     tlsTruststorePassword: JKS_KEYSTORE_TRUSTSTORE_PASSWORD
  ##   adminPassword:
  ##     name: keycloak-test2.credentials ## release-name
  ##   managementPassword:
  ##     name: keycloak-test2.credentials
  ##   databasePassword:
  ##     name: keycloak.pocwatt-keycloak-cluster.credentials
  ##   tlsKeystorePassword:
  ##     name: keycloak-test2.credentials
  ##   tlsTruststorePassword:
  ##     name: keycloak-test2.credentials
  ##
  existingSecretPerPassword: {}
  ## TLS encryption parameters
  ## ref: https://github.com/bitnami/bitnami-docker-keycloak#tls-encryption
  ##
  tls:
    enabled: false
    ## @param auth.tls.autoGenerated Generate automatically self-signed TLS certificates. Currently only supports PEM certificates
    autoGenerated: false

serviceDiscovery:
  ## @param serviceDiscovery.enabled Enable Service Discovery for Keycloak (required if `replicaCount` > `1`)
  ##
  enabled: false
  ## @param serviceDiscovery.protocol Sets the protocol that Keycloak nodes would use to discover new peers
  ## Available protocols can be found at http://www.jgroups.org/javadoc3/org/jgroups/protocols/
  ##
  protocol: kubernetes.KUBE_PING
  ## @param serviceDiscovery.properties Properties for the discovery protocol set in `serviceDiscovery.protocol` parameter
  ## List of key=>value pairs
  ## Example:
  ## properties:
  ##   - datasource_jndi_name=>"java:jboss/datasources/KeycloakDS"
  ##   - initialize_sql=>"CREATE TABLE IF NOT EXISTS JGROUPSPING ( own_addr varchar(200) NOT NULL, cluster_name varchar(200) NOT NULL, created timestamp default current_timestamp, ping_data BYTEA, constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))"
  ##
  properties: []

replicaCount: 1
containerPorts:
  http: 8080
  https: 8443
  management: 9990

resources:
  requests: {}
  limits: {}

affinity: {}

service:
  type: ClusterIP  # XXX: LoadBalancer (default) exposes this and we may want to keep it internal or via an ingress
  ports:
    http: 80
    https: 443
  #loadBalancerIP: ""
  #loadBalancerSourceRanges: []

#ingress:
#  enabled: false
#  ingressClassName: ""
#  hostname: keycloak.local
#  path: /
#  servicePort: http
#  tls: false

## Keycloak Pod Disruption Budget configuration
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
##
#pdb:
#  create: false
#  ## @param pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
#  ##
#  minAvailable: 1
#  ## @param pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable
#  ##
#  maxUnavailable: ""

#autoscaling:
#  enabled: false
#  minReplicas: 1
#  maxReplicas: 11
#  targetCPU: ""
#  targetMemory: ""

#metrics:
#  enabled: false
#  service:
#    ports:
#      http: 9990
#    annotations:
#      prometheus.io/scrape: "true"
#      prometheus.io/port: "{{ .Values.metrics.service.ports.http }}"

## PostgreSQL chart configuration
## ref: https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml
## @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
## @param postgresql.auth.username Name for a custom user to create
## @param postgresql.auth.password Password for the custom user to create
## @param postgresql.auth.database Name for a custom database to create
## @param postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials
## @param postgresql.architecture PostgreSQL architecture (`standalone` or `replication`)
##
postgresql:
  enabled: true  # XXX: REPLACE THIS WITH STABLE EXTERNAL POSTGRESQL in section below
  auth:
    username: bn_keycloak
    # XXX: don't hardcode password here, use an existing secret
    password: ""
    database: bitnami_keycloak
    #
    # XXX: match the existing secret name which needs to be re-created to be fixed, not randomly generated each chart run
    existingSecret: keycloak-postgresql
    #
    # XXX: match existing secret key to minimize diff:
    #        - password key is for the bn_keycloak postgres user
    #        - postgres-password key is implicitly expected for the postgres superuser
    existingSecretPasswordKey: password
  architecture: standalone
## External PostgreSQL configuration
## All of these values are only used when postgresql.enabled is set to false
## @param externalDatabase.host Database host
## @param externalDatabase.port Database port number
## @param externalDatabase.user Non-root username for Keycloak
## @param externalDatabase.password Password for the non-root username for Keycloak
## @param externalDatabase.database Keycloak database name
## @param externalDatabase.existingSecret Name of an existing secret resource containing the database credentials
## @param externalDatabase.existingSecretPasswordKey Name of an existing secret key containing the database credentials
##
#
# XXX: migrate above PostgreSQL to RDS or similar external stable DB later, to avoid issues like this which are harder to solve in K8s due to requiring full pg_dump + restore or pg_upgrade requiring simulataneously available versions:
#
#     postgresql 16:29:50.81 INFO  ==> ** Starting PostgreSQL **
#     2023-04-14 16:29:50.825 GMT [1] FATAL:  database files are incompatible with server
#     2023-04-14 16:29:50.825 GMT [1] DETAIL:  The data directory was initialized by PostgreSQL version 14, which is not compatible with this version 15.2.
#
#externalDatabase:
#  host: ""
#  port: 5432
#  user: bn_keycloak
#  database: bitnami_keycloak
#  # XXX: don't hardcode password here, use an existing secret
#  password: ""
#  #
#  # XXX: match the existing secret name which needs to be re-created to be fixed, not randomly generated each chart run
#  existingSecret: keycloak-postgresql
#  #
#  # XXX: match existing secret key to minimize diff:
#  #        - password key is for the bn_keycloak postgres user
#  #        - postgres-password key is implicitly expected for the postgres superuser
#  existingSecretPasswordKey: password
